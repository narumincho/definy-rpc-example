/* eslint-disable */
/* generated by definy. Do not edit! */

import * as a from "https://raw.githubusercontent.com/narumincho/definy/f662850e6a0cb9ec7a69e60f424624c07dd417fa/deno-lib/definyRpc/core/coreType.ts";
import * as b from "https://raw.githubusercontent.com/narumincho/definy/f662850e6a0cb9ec7a69e60f424624c07dd417fa/deno-lib/definyRpc/core/request.ts";

/**
 * アカウントのタイプ
 */
export type AccountType =
  | {
      /**
       * 人間. パラメーターには身長 (mm)
       */
      readonly type: "human";
      /**
       * 人間. パラメーターには身長 (mm)
       */
      readonly value: number;
      readonly [Symbol.toStringTag]: "custom.AccountType";
    }
  | {
      /**
       * ボット．パラメーターには書き込みを許可しているかをしていする．trueで許可をしている
       */
      readonly type: "bot";
      /**
       * ボット．パラメーターには書き込みを許可しているかをしていする．trueで許可をしている
       */
      readonly value: boolean;
      readonly [Symbol.toStringTag]: "custom.AccountType";
    };

/**
 * アカウントのタイプ
 */
export const AccountType: {
  /**
   * AccountType の型
   */
  readonly type: () => a.Type<AccountType>;
  /**
   * 人間. パラメーターには身長 (mm)
   */
  readonly human: (a: number) => AccountType;
  /**
   * ボット．パラメーターには書き込みを許可しているかをしていする．trueで許可をしている
   */
  readonly bot: (a: boolean) => AccountType;
} = {
  type: (): a.Type<AccountType> =>
    a.Type.from({
      namespace: a.Namespace.local(["custom"]),
      name: "AccountType",
      parameters: [],
    }),
  human: (p: number): AccountType => ({
    type: "human",
    value: p,
    [Symbol.toStringTag]: "custom.AccountType",
  }),
  bot: (p: boolean): AccountType => ({
    type: "bot",
    value: p,
    [Symbol.toStringTag]: "custom.AccountType",
  }),
};

/**
 * ダミーのアカウントタイプを返す
 */
export const staticAccountType = (parameter: {
  /**
   * api end point
   * @default new URL("http://[::1]:8000")
   */
  readonly url?: globalThis.URL | undefined;
}): globalThis.Promise<a.Result<AccountType, string>> =>
  b.requestQuery({
    url: parameter.url ?? new globalThis.URL("http://[::1]:8000"),
    namespace: a.FunctionNamespace.local(["custom"]),
    name: "staticAccountType",
    inputType: a.Unit.type(),
    outputType: AccountType.type(),
    input: undefined,
    typeMap: new Map([
      [
        "custom.AccountType",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.local(["custom"]),
          name: "AccountType",
          description: "アカウントのタイプ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.sum([
            a.Pattern.from({
              name: "human",
              description: "人間. パラメーターには身長 (mm)",
              parameter: a.Maybe.just(a.Number.type()),
            }),
            a.Pattern.from({
              name: "bot",
              description:
                "ボット．パラメーターには書き込みを許可しているかをしていする．trueで許可をしている",
              parameter: a.Maybe.just(a.Bool.type()),
            }),
          ]),
        }),
      ],
      [
        "*coreType.Unit",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Unit",
          description: "値が1つだけ",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.unit,
        }),
      ],
      [
        "*coreType.Bool",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Bool",
          description: "Bool. boolean. 真偽値. True か False",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.boolean,
        }),
      ],
      [
        "*coreType.Number",
        a.DefinyRpcTypeInfo.from({
          namespace: a.Namespace.coreType,
          name: "Number",
          description: "64bit 浮動小数点数",
          parameter: [],
          attribute: a.Maybe.nothing(),
          body: a.TypeBody.number,
        }),
      ],
    ]),
  });
